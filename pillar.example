# vim: ft=yaml
# yamllint disable rule:comments-indentation
---
warden:
    # Specify the vaultwarden version to install. Can be any valid git rev.
    # If `latest`, will try to query Github to find the latest release.
  version: latest

    # Specify the web vault version to install. Needs to be a release.
    # Set to `false` to disable the installation.
  version_web_vault: latest

    # If you want to install a compiled Vaultwarden binary,
    # you can list parameters for a `file.managed` state here.
    # If a source is defined, the compilation will be skipped.
  install:
    source: []

    # Open necessary ports on RedHat family automatically
  manage_firewall: false

    # For compilation of Vaultwarden, a functional Rust toolchain
    # is required. Set this to false to skip inbuilt installation or to a
    # string that represents a state than can be imported and required.
    # The default value of true will use the inbuilt state of this formula.
  rust_setup: true

    # Which databases to support in the compiled binary.
    # By default, compiles for all three.
  features:
    - mysql
    - postgresql
    - sqlite

    # If the service unit should require a mount for a specific path
    # or wait for the success of another unit (eg database), specify
    # that here. `requires_mount` should be a list of paths, `wants` should be a
    # list of unit names, without the `.service` suffix.
  service:
    requires_mount: []
    wants: []

    # This is where you can specify the actual configuration.
    # It will be dumped into environment variables used for Vaultwarden.
    # That means, if you have activated the admin panel, configuration
    # done there will overwrite the ones specified here.
    # It is advised to stick to lower case for the keys to prevent possible
    # issues with the autoconfiguration done in `post-map.jinja`.
    # You do not need to specify the paths.
    # List of possible configuration vars:
    # https://github.com/dani-garcia/vaultwarden/blob/main/.env.template
  config:
    admin_token: ''
      # This path is not automatically configured.
    database_url: db.sqlite3
    disable_icon_download: false
    domain: http://vault.example.com
    signups_allowed: true
      # YAML lists are dumped as comma-separated lists.
    signups_domains_whitelist:
      - example.com
      - example.net
      - example.org
    signups_verify: false
      # This path is not automatically configured.
    templates_folder: /path/to/templates
    web_vault_enabled: true

    # These are mostly internal parameters that you should not have to
    # modify too often.
    # If you change the paths, the bitwarden config will be adapted automatically.
    # For future releases (>1.24) at least, mind the following:
    #   The file uploads are now also handled by rocket directly, and uploaded
    #   to a configurable temp directory first, before being moved to the attachments or
    #   sends folder. We should document that the temp directory and the attachments and
    #   sends folder must be in the same partition/mount point, otherwise the file move
    #   will fail. (https://github.com/dani-garcia/vaultwarden/pull/2276)
    # The env var for that is "TMP_FOLDER". @TODO
  lookup:
    gpg:
      keys:
        - B9B7A108373276BF3C0406F9FC8A7D14C3CD543A
        - 3C5BBC173D81186CFFDE72A958C80A2AA6C765E1
      server: pgp.mit.edu
    group: vaultwarden
    paths:
      attachments: attachments
      bin: /opt/vaultwarden
      build: /opt/vaultwarden/src
      conf: /etc/vaultwarden
      data: /var/lib/vaultwarden
      home: /home/vaultwarden
      icon_cache: icon_cache
      log: /var/log/vaultwarden
      rsa_keyfile: rsa_key
      sends: sends
      web_vault: /opt/vaultwarden/web-vault
    pkg:
      latest: https://github.com/dani-garcia/vaultwarden/releases/latest/
      source: https://github.com/dani-garcia/vaultwarden.git
    requirements:
      base:
        - build-essential
        - git
        - pkg-config
        - libssl-dev
      gpg:
        lib:
          pip: python-gnupg
          pkg: python3-gnupg
        pkg: gpg
      mysql:
        - libmariadb-dev-compat
        - libmariadb-dev
      postgresql:
        - libpq-dev
        - pkg-config
      sqlite:
        - libsqlite3-dev
    rustup_init:
      source: https://sh.rustup.rs
      source_hash: 41262c98ae4effc2a752340608542d9fe411da73aca5fbe947fe45f61b7bd5cf
    service:
      name: vaultwarden
      unit: /etc/systemd/system/{name}.service
    user: vaultwarden
    web_vault:
      latest: https://github.com/dani-garcia/bw_web_builds/releases/latest/
      sig: https://github.com/dani-garcia/bw_web_builds/releases/download/v{version}/bw_web_v{version}.tar.gz.asc  # yamllint disable-line rule:line-length
      source: https://github.com/dani-garcia/bw_web_builds/releases/download/v{version}/bw_web_v{version}.tar.gz  # yamllint disable-line rule:line-length

  tofs:
      # The files_switch key serves as a selector for alternative
      # directories under the formula files directory. See TOFS pattern
      # doc for more info.
      # Note: Any value not evaluated by `config.get` will be used literally.
      # This can be used to set custom paths, as many levels deep as required.
    files_switch:
      - any/path/can/be/used/here
      - id
      - roles
      - osfinger
      - os
      - os_family

      # All aspects of path/file resolution are customisable using the options below.
      # This is unnecessary in most cases; there are sensible defaults.
      # Default path: salt://< path_prefix >/< dirs.files >/< dirs.default >
      # I.e.: salt://warden/files/default
      # path_prefix: template_alt
      # dirs:
      #   files: files_alt
      #   default: default_alt
      # The entries under `source_files` are prepended to the default source files
      # given for the state
    source_files:
      Vaultwarden configuration is managed:
        - 'vaultwarden_alt.conf'
        - 'vaultwarden_alt.conf.j2'
